import sys
import os
import subprocess
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLineEdit, QTextEdit, QPushButton,
    QMessageBox, QLabel, QFileDialog, QHBoxLayout, QCheckBox
)
from PyQt6.QtCore import QStandardPaths
from PyQt6.QtGui import QIcon


class CodeSaverApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyMaker ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ .py —Ñ–∞–π–ª–∞")
        self.setMinimumWidth(560)

        # === –ò–ö–û–ù–ö–ê –û–ö–ù–ê ===
        app_dir = os.path.dirname(os.path.abspath(__file__))
        icon_path = os.path.join(app_dir, "icon.ico")
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))

        layout = QVBoxLayout()

        # –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞
        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"))
        self.code_input = QTextEdit()
        self.code_input.setPlaceholderText("# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å")
        layout.addWidget(self.code_input)

        # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞
        layout.addWidget(QLabel("–ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ (–∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–ø–∫–∞):"))
        folder_layout = QHBoxLayout()
        self.folder_input = QLineEdit()
        self.folder_input.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É...")
        # –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –†–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
        desktop_paths = QStandardPaths.standardLocations(QStandardPaths.StandardLocation.DesktopLocation)
        if desktop_paths:
            self.folder_input.setText(desktop_paths[0])
        select_folder_btn = QPushButton("üìÇ")
        select_folder_btn.setFixedWidth(40)
        select_folder_btn.clicked.connect(self.select_folder)
        folder_layout.addWidget(self.folder_input)
        folder_layout.addWidget(select_folder_btn)
        layout.addLayout(folder_layout)

        # –ò–º—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–∞–ø–∫–∏
        layout.addWidget(QLabel("–ò–º—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–∞–ø–∫–∏ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π):"))
        self.subfolder_input = QLineEdit()
        self.subfolder_input.setPlaceholderText("–Ω–∞–ø—Ä–∏–º–µ—Ä, my_project (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        layout.addWidget(self.subfolder_input)

        # –ò–º—è —Ñ–∞–π–ª–∞
        layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:"))
        self.file_input = QLineEdit("main.py")
        layout.addWidget(self.file_input)

        # –ì–∞–ª–æ—á–∫–∏
        self.open_after_save = QCheckBox("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        self.open_folder_after_save = QCheckBox("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        layout.addWidget(self.open_after_save)
        layout.addWidget(self.open_folder_after_save)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        save_button = QPushButton("–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
        save_button.clicked.connect(self.save_file)
        layout.addWidget(save_button)

        self.setLayout(layout)

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            self.folder_input.setText(folder)

    def save_file(self):
        base_folder = self.folder_input.text().strip()
        subfolder = self.subfolder_input.text().strip()
        file_name = self.file_input.text().strip()
        code_text = self.code_input.toPlainText()

        if not base_folder:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        if not file_name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.")
            return
        if not file_name.endswith(".py"):
            file_name += ".py"

        # –ò—Ç–æ–≥–æ–≤–∞—è –ø–∞–ø–∫–∞: base_folder[/subfolder]
        target_folder = os.path.join(base_folder, subfolder) if subfolder else base_folder

        try:
            os.makedirs(target_folder, exist_ok=True)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É:\n{e}")
            return

        file_path = os.path.join(target_folder, file_name)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(code_text)

            QMessageBox.information(
                self, "–ì–æ—Ç–æ–≤–æ",
                f"–ü–∞–ø–∫–∞:\n{target_folder}\n\n–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:\n{file_path}"
            )

            # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            if self.open_after_save.isChecked():
                self.open_path(file_path)
            if self.open_folder_after_save.isChecked():
                self.open_path(target_folder)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def open_path(self, path):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            if os.name == "nt":  # Windows
                os.startfile(path)
            elif sys.platform == "darwin":  # macOS
                subprocess.call(["open", path])
            else:  # Linux
                subprocess.call(["xdg-open", path])
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å:\n{path}\n\n{e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)

    # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á/–¥–æ–∫–∞
    try:
        app_dir = os.path.dirname(os.path.abspath(__file__))
        icon_path = os.path.join(app_dir, "icon.ico")
        if os.path.exists(icon_path):
            app.setWindowIcon(QIcon(icon_path))
    except Exception:
        pass

    window = CodeSaverApp()
    window.show()
    sys.exit(app.exec())
